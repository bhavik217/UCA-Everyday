function and data is building block of any application
classes are basically wrappers on top of these functions
behaviours are basically added in methods to define scope of variables


Scopes in javascript:


==>global  scope: window object, JSON etc 
==>function scope
==>block scope


==> hoisting never makes a function global it just moves the declaration to the top level of the innermost function not innermost block (therefore variable declared with var is accessible but let is not)


==> difference between not defined and undefined
undefined- variable is declared but is not initialized meaning variable exists but not yet given any value
not defined- variable is not declare that is no such variable exists

-> const is block scoped
->let is block scoped coz they are not hoisted 
-> var is function scoped not block scoped
-> better to use let coz var behaviour is stupid and inconsistent.. we dont know where it will get hoisted

==> anything inside curly braces- block scope

==> any variable declared irrespective of how they are declared(var/let etc) will be accessible in the innermost function and scopes but variables declares in innermost function is not accessible outside

//null is also  a kind of value but undefined means no value exists


==>Everything in js is an object even a variable (let x = 7) also an object because we can use function on it like isInteger()
// variable is also an object as after its dtype is inferred during runtime js attaches various methods and properties to it
//object is anything that has properties

in client server arch in most cases data is passed in the form of objects only
data over network travel in the form of string in http protocol

therefore objects are also sent in the form of strings... to achieve this we use json.stringify ..it converts any object to string to create an illusion to network that we are sending data in the form of strings

==> when we send data to frontend or backend it is always converted into a string  (JSON.stringify(obj))

==> now to convert it back to string we use JSON.parse(obj)

var obj1 = {
    name : "bhavik",
    roll : 217
}
JSON.stringify(obj)
'{name : "bhavik", roll : 217}'


// in case of axios when sending request to server .. it automatically stringify the object
but using fetch and ajax we have to explicitly perform json.stringify before sending the data


LOCAL STORAGE

localStorage.setItem("name", bhavik)  // it store data in the form of string in local storage

localStorage.getItem("name")    // return in the form of string
'{"name", bhavik}'  // Now we can parse this data from string to object


// forEach vs map

forEach - do not return anything just print on console
map - return a newarray

we cant break map and forEach iteration
we can only skip map and forEach iteration

Es6 is a specification of js not a language they just tell what can be better in the language



REST AND SPREAD

var arr1 = [1,2,3];
var arr2 = arr1;    // arr2 just stores address of arr1 not copy

// Spread operater (...)
    var arr1 = [1,2,3]
    var arr2 = arr1
    var arr3 = [...arr1, ...arr2]

    arr3
    (6)Â [1, 2, 3, 1, 2, 3]



// Rest operator
function foo(...arguments){     // ...arguments (Rest operator)
    let mul = 1;
    for(let i = 0; i<arguments.length; i++){
        mul = mul * arguments[i];
    }
    return mul;
}
foo(1,2,3,4,5)  // we can pass any no. of elements as arguments to a function bcoz it is creating a newarray and this functionality is called as Rest

diff b/w spread and rest
spread - it spreads an array
rest - it is used in function to pass indefinite no. of arguments



Project - CRUD(Local and session storage)
Github version control